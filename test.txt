import { useState } from 'react';

export default function UserDataForm() {
  const [hasData, setHasData] = useState(false);
  const [gender, setGender] = useState('');
  const [age, setAge] = useState('');

  const handleSubmit = () => {
    if (gender && age) {
      // Store data in state instead of localStorage
      setHasData(true);
      console.log('Data saved:', { gender, age });
    }
  };

  // If data exists, show nothing (or a message)
  if (hasData) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="bg-white p-8 rounded-lg shadow-md">
          <h2 className="text-2xl font-semibold text-green-600">âœ“ Data Saved</h2>
          <p className="mt-2 text-gray-600">Your information has been recorded.</p>
        </div>
      </div>
    );
  }

  // If no data, show the form
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 p-4">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
        <h2 className="text-2xl font-bold text-gray-800 mb-6">User Information</h2>
        
        <div className="space-y-6">
          {/* Gender Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              Gender
            </label>
            <div className="space-y-2">
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="gender"
                  value="male"
                  checked={gender === 'male'}
                  onChange={(e) => setGender(e.target.value)}
                  className="w-4 h-4 text-blue-600 cursor-pointer"
                />
                <span className="text-gray-700">Male</span>
              </label>
              
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="gender"
                  value="female"
                  checked={gender === 'female'}
                  onChange={(e) => setGender(e.target.value)}
                  className="w-4 h-4 text-blue-600 cursor-pointer"
                />
                <span className="text-gray-700">Female</span>
              </label>
              
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="gender"
                  value="other"
                  checked={gender === 'other'}
                  onChange={(e) => setGender(e.target.value)}
                  className="w-4 h-4 text-blue-600 cursor-pointer"
                />
                <span className="text-gray-700">Other</span>
              </label>
            </div>
          </div>

          {/* Age Input */}
          <div>
            <label htmlFor="age" className="block text-sm font-medium text-gray-700 mb-2">
              Age
            </label>
            <input
              type="number"
              id="age"
              value={age}
              onChange={(e) => setAge(e.target.value)}
              min="1"
              max="150"
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter your age"
            />
          </div>

          {/* Submit Button */}
          <button
            onClick={handleSubmit}
            disabled={!gender || !age}
            className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors font-medium disabled:bg-gray-400 disabled:cursor-not-allowed"
          >
            Submit
          </button>
        </div>
      </div>
    </div>
  );
}












/**
 * MessageBubble Component
 * 
 * Renders an individual chat message with styling differentiated by sender type.
 * Features:
 * - Fade-in animation on mount
 * - Different avatars for user vs bot messages
 * - Markdown rendering for bot messages
 * - Context tags display (when available)
 * - Timestamp display
 * - Responsive layout with flexbox
 */
const MessageBubble = ({ message }: { message: Message }) => {
  // Determine if the current message is from the user (vs bot)
  const isUser = message.sender === "user";
  
  // State to control fade-in animation visibility
  const [isVisible, setIsVisible] = useState(false);
  
  /**
   * Effect: Triggers fade-in animation after component mounts
   * Adds a 100ms delay before making the message visible for smooth entrance
   */
  useEffect(() => {
    const timer = setTimeout(() => setIsVisible(true), 100);
    // Cleanup: Clear timeout if component unmounts before timer completes
    return () => clearTimeout(timer);
  }, []); // Empty dependency array = runs once on mount
  
  return (
    // Main container: applies different classes based on sender and visibility state
    <div className={`message-container ${isUser ? "user-message" : "bot-message"} ${isVisible ? "visible" : ""}`}>
      
      {/* Avatar Section: Displays user or bot icon */}
      <div className="message-avatar">
        <div className={`avatar-wrapper ${isUser ? "user-avatar" : "bot-avatar"}`}>
          {/* Conditionally render User or Bot icon from lucide-react */}
          {isUser ? <User className="avatar-icon" /> : <Bot className="avatar-icon" />}
        </div>
      </div>
      
      {/* Message Content Section: Contains the actual message and timestamp */}
      <div className="message-content">
        
        {/* Context Tags Section: Display context sources if available */}
        {message.contexts && message.contexts.length > 0 && (
          <div className="message-contexts">
            {message.contexts.map((context, index) => (
              <span key={index} className="context-tag">
                {context}
              </span>
            ))}
          </div>
        )}
        
        {/* Message Bubble: The main text container */}
        <div className={`message-bubble ${isUser ? "user-bubble" : "bot-bubble"}`}>
          {isUser ? (
            // User messages: Simple paragraph rendering
            <p className="message-text">{message.content}</p>
          ) : (
            // Bot messages: Markdown rendering with custom component styling
            <ReactMarkdown
              children={message.content}
              remarkPlugins={[remarkGfm]} // GitHub Flavored Markdown support (tables, strikethrough, etc.)
              components={{
                // Custom renderers for markdown elements to apply consistent styling
                p: (props) => <p className="message-text" {...props} />,
                strong: (props) => <strong className="markdown-strong" {...props} />,
                ul: (props) => <ul className="markdown-list" {...props} />,
                ol: (props) => <ol className="markdown-ordered-list" {...props} />,
                li: (props) => <li className="markdown-list-item" {...props} />,
                code: (props) => <code className="markdown-code" {...props} />,
                pre: (props) => <pre className="markdown-pre" {...props} />,
              }}
            />
          )}
        </div>
        
        {/* Timestamp: Shows when the message was sent in 12-hour format */}
        <div className="message-time">
          {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
        </div>
      </div>
    </div>
  );
};


/* Context tags container */
.message-contexts {
  display: flex;
  flex-wrap: wrap;
  gap: 6px;
  margin-bottom: 8px;
}

/* Individual context tag styling */
.context-tag {
  display: inline-block;
  font-size: 0.7rem; /* Small text size */
  padding: 2px 8px;
  background-color: rgba(100, 100, 100, 0.15);
  border-radius: 12px;
  color: #666;
  border: 1px solid rgba(100, 100, 100, 0.2);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 200px; /* Prevent overly long context names */
}

/* Different styling for bot message contexts */
.bot-message .context-tag {
  background-color: rgba(59, 130, 246, 0.1);
  border-color: rgba(59, 130, 246, 0.3);
  color: #3b82f6;
}

/* Different styling for user message contexts */
.user-message .context-tag {
  background-color: rgba(139, 92, 246, 0.1);
  border-color: rgba(139, 92, 246, 0.3);
  color: #8b5cf6;
}
